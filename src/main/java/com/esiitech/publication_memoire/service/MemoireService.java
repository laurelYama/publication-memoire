package com.esiitech.publication_memoire.service;

import com.esiitech.publication_memoire.config.StorageProperties;
import com.esiitech.publication_memoire.dto.MemoireDTO;
import com.esiitech.publication_memoire.entity.Memoire;
import com.esiitech.publication_memoire.entity.Utilisateur;
import com.esiitech.publication_memoire.enums.Role;
import com.esiitech.publication_memoire.enums.StatutMemoire;
import com.esiitech.publication_memoire.logging.Loggable;
import com.esiitech.publication_memoire.mapper.MemoireMapper;
import com.esiitech.publication_memoire.repository.MemoireRepository;
import com.esiitech.publication_memoire.repository.UtilisateurRepository;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import static com.esiitech.publication_memoire.enums.StatutMemoire.VALIDE;

@Service
public class MemoireService {

    @Value("${app.storage.base-path}")
    private String basePath;

    private final MemoireRepository memoireRepository;
    private final UtilisateurRepository utilisateurRepository;
    private final EmailService emailService;
    private final MemoireMapper memoireMapper;
    private final StorageProperties storageProperties;
    private final HistoriqueActionService historiqueActionService;

    // Constructeur injectant les d√©pendances n√©cessaires
    public MemoireService(
            MemoireRepository memoireRepository,
            UtilisateurRepository utilisateurRepository,
            EmailService emailService,
            MemoireMapper memoireMapper,
            StorageProperties storageProperties,
            HistoriqueActionService historiqueActionService) {
        this.memoireRepository = memoireRepository;
        this.utilisateurRepository = utilisateurRepository;
        this.emailService = emailService;
        this.memoireMapper = memoireMapper;
        this.storageProperties = storageProperties;
        this.historiqueActionService = historiqueActionService;
    }

    /**
     * Permet √† un √©tudiant de soumettre un m√©moire.
     * Le fichier est enregistr√© et le m√©moire est sauvegard√© avec le statut EN_ATTENTE.
     */
    @Loggable
    public MemoireDTO soumettreMemoire(Long etudiantId, String titre, String description, MultipartFile fichierWord) throws IOException {
        // 1. V√©rifie que l'√©tudiant existe
        Utilisateur etudiant = utilisateurRepository.findById(etudiantId)
                .orElseThrow(() -> new EntityNotFoundException("√âtudiant introuvable avec l'ID : " + etudiantId));

        // 2. Sauvegarde du fichier m√©moire
        String cheminFichier = sauvegarderFichier(fichierWord, "m√©moires");

        // 3. Cr√©ation du m√©moire
        Memoire memoire = new Memoire();
        memoire.setTitre(titre);
        memoire.setDescription(description);
        memoire.setFichierWord(cheminFichier);
        memoire.setEtudiant(etudiant);
        memoire.setStatut(StatutMemoire.EN_ATTENTE);

        // 4. Sauvegarde du m√©moire
        Memoire saved = memoireRepository.save(memoire);

        // 5. Historique pour l'√©tudiant
        historiqueActionService.enregistrerAction(etudiant, "Soumission du m√©moire", saved);

        // 6. R√©cup√©ration du premier admin
        Utilisateur admin = utilisateurRepository.findFirstByRoleOrderByIdAsc(Role.ADMIN)
                .orElseThrow(() -> new EntityNotFoundException("Aucun administrateur trouv√©"));

        // 7. Notification par mail √† l‚Äôadmin
        String sujetAdmin = "üìò Nouveau m√©moire soumis";
        String contenuAdmin = """
            Bonjour %s,

            Un nouveau m√©moire a √©t√© soumis par l'√©tudiant %s (%s).

            Titre du m√©moire : %s
            Description : %s

            Veuillez vous connecter √† l'administration pour le consulter.

            Cordialement,
            Syst√®me de gestion des m√©moires
            """.formatted(admin.getNom(), etudiant.getNom(), etudiant.getEmail(), titre, description);

        emailService.sendEmail(admin.getEmail(), sujetAdmin, contenuAdmin);

        // 8. Notification par mail √† l‚Äô√©tudiant
        String sujetEtudiant = "‚úÖ Votre m√©moire a bien √©t√© soumis";
        String contenuEtudiant = """
            Bonjour %s,

            Votre m√©moire intitul√© ¬´ %s ¬ª a √©t√© soumis avec succ√®s. Il est actuellement en attente de validation par l‚Äôadministration.

            Vous recevrez une notification d√®s qu‚Äôun lecteur vous sera assign√© ou qu‚Äôune action sera effectu√©e sur votre m√©moire.

            Merci pour votre soumission et bonne chance pour la suite !

            Cordialement,
            √âquipe de gestion des m√©moires
            """.formatted(etudiant.getNom(), titre);

        emailService.sendEmail(etudiant.getEmail(), sujetEtudiant, contenuEtudiant);

        // 9. Historique c√¥t√© admin (notification re√ßue)
        historiqueActionService.enregistrerAction(admin, "Notification re√ßue : Soumission m√©moire de " + etudiant.getNom(), saved);

        return memoireMapper.toDto(saved);
    }



    /**
     * Permet au lecteur de transmettre un m√©moire corrig√©.
     * Le fichier corrig√© est enregistr√© et un mail est envoy√© √† l'administrateur.
     */
    @Loggable
    public MemoireDTO transmettreParLecteur(Long memoireId, Long lecteurId, String commentaire, MultipartFile fichierCorrige) throws IOException {
        Memoire memoire = memoireRepository.findById(memoireId)
                .orElseThrow(() -> new EntityNotFoundException("M√©moire introuvable avec ID : " + memoireId));

        Utilisateur lecteur = utilisateurRepository.findById(lecteurId)
                .orElseThrow(() -> new EntityNotFoundException("Lecteur introuvable avec ID : " + lecteurId));

        if (fichierCorrige == null || fichierCorrige.isEmpty()) {
            throw new IllegalArgumentException("Le fichier corrig√© est requis.");
        }

        String cheminCorrige = sauvegarderFichier(fichierCorrige, "corrections");
        memoire.setFichierCorrige(cheminCorrige);
        memoire.setLecteur(lecteur);
        memoire.setStatut(StatutMemoire.TRANSMIS);
        memoire.setCommentaire(commentaire);

        Utilisateur admin = utilisateurRepository.findFirstByRoleOrderByIdAsc(Role.ADMIN)
                .stream().findFirst()
                .orElseThrow(() -> new RuntimeException("Administrateur introuvable."));

        emailService.sendEmail(admin.getEmail(), "M√©moire transmis par le lecteur",
                String.format("Bonjour,\n\nLe m√©moire \"%s\" a √©t√© corrig√© et transmis par %s %s.\n\nCommentaire : %s",
                        memoire.getTitre(), lecteur.getPrenom(), lecteur.getNom(), commentaire != null ? commentaire : "Aucun commentaire"));

        Memoire updated = memoireRepository.save(memoire);
        historiqueActionService.enregistrerAction(lecteur, "Transmission du m√©moire corrig√©", updated);

        return memoireMapper.toDto(updated);
    }

    /**
     * Permet √† l‚Äôadministrateur de valider un m√©moire.
     * Le fichier corrig√© est converti en PDF, le statut passe √† VALIDE.
     */
    @Loggable
    public MemoireDTO validerMemoire(Long memoireId, Long adminId) throws Exception {
        Memoire memoire = memoireRepository.findById(memoireId)
                .orElseThrow(() -> new EntityNotFoundException("M√©moire introuvable avec ID : " + memoireId));

        Utilisateur admin = utilisateurRepository.findById(adminId)
                .orElseThrow(() -> new EntityNotFoundException("Administrateur introuvable avec ID : " + adminId));

        if (memoire.getFichierCorrige() == null) {
            throw new IllegalStateException("Aucun fichier corrig√© √† convertir.");
        }

        String cheminPdf = convertirWordEnPdf(memoire.getFichierCorrige());
        memoire.setFichierPdf(cheminPdf);
        memoire.setStatut(VALIDE);

        Utilisateur etudiant = memoire.getEtudiant();
        emailService.sendEmail(etudiant.getEmail(), "M√©moire valid√©",
                "F√©licitations, votre m√©moire a √©t√© valid√© et est publi√© en PDF.");

        Memoire updated = memoireRepository.save(memoire);
        historiqueActionService.enregistrerAction(admin, "Validation du m√©moire", updated);

        return memoireMapper.toDto(updated);
    }

    /**
     * Permet √† l‚Äôadministrateur de rejeter un m√©moire avec un commentaire.
     * L‚Äô√©tudiant est notifi√© par email.
     */
    @Loggable
    public MemoireDTO rejeterParAdmin(Long memoireId, String commentaire) {
        Memoire memoire = memoireRepository.findById(memoireId)
                .orElseThrow(() -> new EntityNotFoundException("M√©moire introuvable avec l'ID : " + memoireId));

        memoire.setStatut(StatutMemoire.REJETE);
        memoire.setCommentaire(commentaire);

        Utilisateur etudiant = memoire.getEtudiant();
        if (etudiant != null && etudiant.getEmail() != null) {
            emailService.sendEmail(
                    etudiant.getEmail(),
                    "Rejet de votre m√©moire",
                    String.format("Bonjour %s,\n\nVotre m√©moire \"%s\" a √©t√© rejet√© pour la raison suivante :\n%s\n\nMerci de corriger et soumettre √† nouveau.\n\nCordialement,\nL'√©quipe.",
                            etudiant.getPrenom(), memoire.getTitre(), commentaire)
            );
        }

        Memoire updated = memoireRepository.save(memoire);
        historiqueActionService.enregistrerAction(etudiant, "M√©moire rejet√© par l‚Äôadministrateur", updated);

        return memoireMapper.toDto(updated);
    }

    /**
     * Permet de changer la visibilit√© d‚Äôun m√©moire (public/priv√©).
     */
    @Loggable
    public MemoireDTO changerVisibilite(Long memoireId, boolean estPublic) {
        Memoire memoire = memoireRepository.findById(memoireId)
                .orElseThrow(() -> new EntityNotFoundException("M√©moire introuvable avec l'ID : " + memoireId));

        memoire.setEstPublic(estPublic);

        Memoire updated = memoireRepository.save(memoire);
        historiqueActionService.enregistrerAction(
                memoire.getEtudiant(), estPublic ? "M√©moire rendu public" : "M√©moire rendu priv√©", updated
        );

        return memoireMapper.toDto(updated);
    }

    /**
     * Enregistre un fichier envoy√© (Word uniquement) dans un dossier cible.
     * V√©rifie le format et g√©n√®re un nom unique.
     */
    private String sauvegarderFichier(MultipartFile fichier, String dossierCible) throws IOException {
        if (fichier.isEmpty()) {
            throw new IllegalArgumentException("Le fichier est vide.");
        }

        String originalFilename = fichier.getOriginalFilename();
        if (originalFilename == null || (!originalFilename.toLowerCase().endsWith(".doc") && !originalFilename.toLowerCase().endsWith(".docx"))) {
            throw new IllegalArgumentException("Le fichier doit √™tre au format Word (.doc ou .docx)");
        }

        String nomUnique = UUID.randomUUID() + "_" + originalFilename;

        Path dossierPath = Paths.get(storageProperties.getUploadDir(), dossierCible).toAbsolutePath().normalize();
        Files.createDirectories(dossierPath);

        Path cheminFichier = dossierPath.resolve(nomUnique);
        fichier.transferTo(cheminFichier.toFile());

        return dossierCible + "/" + nomUnique;
    }

    /**
     * Convertit un fichier Word (.doc/.docx) en PDF via LibreOffice en ligne de commande.
     * Le fichier PDF est enregistr√© dans le dossier d√©fini dans la configuration.
     */
    private String convertirWordEnPdf(String cheminRelatifFichierWord) throws IOException, InterruptedException {
        Path cheminAbsolu = Paths.get(storageProperties.getUploadDir(), cheminRelatifFichierWord)
                .toAbsolutePath().normalize();
        File fichierWord = cheminAbsolu.toFile();

        if (!fichierWord.exists()) {
            throw new FileNotFoundException("Fichier Word introuvable : " + fichierWord.getAbsolutePath());
        }

        String nomFichierPdf = fichierWord.getName().replaceAll("\\.(doc|docx)$", ".pdf");

        File dossierPdf = new File(storageProperties.getPdfDir());
        if (!dossierPdf.exists()) dossierPdf.mkdirs();

        String cheminFichierPdf = Paths.get(storageProperties.getPdfDir(), nomFichierPdf).toString();

        // Utilisation de LibreOffice pour convertir le fichier
        ProcessBuilder pb = new ProcessBuilder(
                storageProperties.getSofficePath(),
                "--headless",
                "--convert-to", "pdf",
                "--outdir", dossierPdf.getAbsolutePath(),
                fichierWord.getAbsolutePath()
        );

        pb.redirectErrorStream(true);
        Process process = pb.start();

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            String ligne;
            while ((ligne = reader.readLine()) != null) {
                System.out.println("[LibreOffice] " + ligne);
            }
        }

        int exitCode = process.waitFor();
        if (exitCode != 0) {
            throw new IOException("Erreur lors de la conversion en PDF (code " + exitCode + ").");
        }

        return cheminFichierPdf;
    }

    /**
     * T√©l√©charge le fichier PDF d'un m√©moire √† partir de son ID.
     *
     * @param id L'identifiant du m√©moire.
     * @return Le fichier PDF en tant que ressource t√©l√©chargeable.
     * @throws IOException Si le fichier est introuvable ou illisible.
     */
    public Resource telechargerMemoirePdf(Long id) throws IOException {
        Memoire memoire = memoireRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("M√©moire introuvable avec l'ID: " + id));

        String cheminFichier = storageProperties.getBasePath() + "/" + memoire.getFichierPdf();
        Path path = Paths.get(cheminFichier);
        Resource resource = new UrlResource(path.toUri());

        if (!resource.exists() || !resource.isReadable()) {
            throw new RuntimeException("Fichier non lisible ou introuvable: " + cheminFichier);
        }

        return resource;
    }

    /**
     * Compte les m√©moires d'un √©tudiant par statut (valide, rejet√©, transmis).
     *
     * @param etudiant L'utilisateur de type √©tudiant.
     * @return Une map contenant les statistiques de ses m√©moires.
     */
    public Map<String, Long> compterMemoiresEtudiant(Utilisateur etudiant) {
        Map<String, Long> stats = new HashMap<>();
        stats.put("valide", memoireRepository.countByEtudiantAndStatut(etudiant, StatutMemoire.VALIDE));
        stats.put("rejete", memoireRepository.countByEtudiantAndStatut(etudiant, StatutMemoire.REJETE));
        stats.put("transmis", memoireRepository.countByEtudiantAndStatut(etudiant, StatutMemoire.TRANSMIS));
        return stats;
    }


    /**
     * Compte les m√©moires associ√©s √† un lecteur par type de traitement.
     *
     * @param lecteur L'utilisateur de type lecteur.
     * @return Une map avec les statistiques : re√ßus, envoy√©s √† l'admin, non trait√©s.
     */
    public Map<String, Long> compterMemoiresLecteur(Utilisateur lecteur) {
        Map<String, Long> stats = new HashMap<>();

        long recus = memoireRepository.countByLecteurAndStatutAndTransmisAAdminFalse(lecteur, StatutMemoire.EN_ATTENTE);
        long envoyesAdmin = memoireRepository.countByLecteurAndStatutAndTransmisAAdminTrue(lecteur, StatutMemoire.EN_ATTENTE);

        stats.put("recus", recus);
        stats.put("envoyesAdmin", envoyesAdmin);
        stats.put("nonTraites", recus); // Les non trait√©s sont ceux re√ßus mais pas encore transmis √† l‚Äôadmin

        return stats;
    }


    /**
     * Compte tous les m√©moires par statut pour l'administrateur.
     *
     * @return Une map avec le nombre total de m√©moires par statut.
     */
    public Map<String, Long> compterMemoiresAdmin() {
        Map<String, Long> stats = new HashMap<>();
        stats.put("valide", memoireRepository.countByStatut(StatutMemoire.VALIDE));
        stats.put("rejete", memoireRepository.countByStatut(StatutMemoire.REJETE));
        stats.put("transmis", memoireRepository.countByStatut(StatutMemoire.TRANSMIS));
        return stats;
    }

    public MemoireDTO assignerLecteur(Long memoireId, Long lecteurId, Long adminId) {
        Memoire memoire = memoireRepository.findById(memoireId)
                .orElseThrow(() -> new EntityNotFoundException("M√©moire non trouv√© avec l'ID : " + memoireId));

        Utilisateur lecteur = utilisateurRepository.findById(lecteurId)
                .orElseThrow(() -> new EntityNotFoundException("Lecteur non trouv√© avec l'ID : " + lecteurId));

        Utilisateur admin = utilisateurRepository.findById(adminId)
                .orElseThrow(() -> new EntityNotFoundException("Administrateur introuvable avec l'ID : " + adminId));

        memoire.setLecteur(lecteur);
        memoire.setStatut(StatutMemoire.EN_ATTENTE); // ou autre statut pertinent

        Memoire updatedMemoire = memoireRepository.save(memoire);

        // Historique
        historiqueActionService.enregistrerAction(admin, "M√©moire assign√© au lecteur " + lecteur.getNom(), memoire);

        // Notifications par mail
        String sujetLecteur = "Nouveau m√©moire assign√©";
        String contenuLecteur = "Vous avez √©t√© assign√© comme lecteur du m√©moire : " + memoire.getTitre();

        String sujetEtudiant = "Votre m√©moire a √©t√© assign√© √† un lecteur";
        String contenuEtudiant = "Votre m√©moire '" + memoire.getTitre() + "' a √©t√© assign√© √† " + lecteur.getNom();

        emailService.sendEmail(lecteur.getEmail(), sujetLecteur, contenuLecteur);
        emailService.sendEmail(memoire.getEtudiant().getEmail(), sujetEtudiant, contenuEtudiant);

        return memoireMapper.toDto(updatedMemoire);
    }



    /**
     * Recherche des m√©moires par nom ou pr√©nom de l'√©tudiant en fonction du r√¥le de l'utilisateur connect√©.
     *
     * @param motCle      Le mot-cl√© √† rechercher (nom ou pr√©nom).
     * @param userDetails L'utilisateur connect√©.
     * @return La liste des m√©moires correspondant aux crit√®res de recherche.
     */
    public List<Memoire> chercherParNomOuPrenom(String motCle, UserDetails userDetails) {
        boolean isAdmin = userDetails.getAuthorities().stream()
                .anyMatch(auth -> auth.getAuthority().equals("ROLE_ADMIN"));
        boolean isEtudiant = userDetails.getAuthorities().stream()
                .anyMatch(auth -> auth.getAuthority().equals("ROLE_ETUDIANT"));

        if (isAdmin) {
            return memoireRepository.searchByNomOrPrenomEtudiant(motCle);
        } else if (isEtudiant) {
            return memoireRepository.searchByNomOrPrenomEtudiantAndStatut(motCle, StatutMemoire.VALIDE);
        } else {
            return memoireRepository.searchByNomOrPrenomEtudiantAndStatutAndEstPublic(motCle, StatutMemoire.VALIDE, true);
        }
    }


    /**
     * T√©l√©charge le fichier original (ex: Word) d‚Äôun m√©moire.
     *
     * @param memoireId L‚Äôidentifiant du m√©moire.
     * @return La r√©ponse contenant le fichier original en tant que ressource.
     * @throws IOException Si le fichier n‚Äôest pas trouv√©.
     */
    @Loggable
    public ResponseEntity<Resource> telechargerFichierOriginal(Long memoireId) throws IOException {
        Memoire memoire = memoireRepository.findById(memoireId)
                .orElseThrow(() -> new EntityNotFoundException("M√©moire introuvable avec ID : " + memoireId));

        Path fichierPath = Paths.get(storageProperties.getUploadDir()).resolve(memoire.getFichierWord()).normalize();
        Resource resource = new UrlResource(fichierPath.toUri());

        if (!resource.exists()) {
            throw new FileNotFoundException("Fichier introuvable : " + fichierPath);
        }

        return ResponseEntity.ok()
                .contentType(MediaType.APPLICATION_OCTET_STREAM)
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + fichierPath.getFileName() + "\"")
                .body(resource);
    }

    public MemoireDTO getMemoireById(Long id) {
        Memoire memoire = memoireRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("M√©moire non trouv√© avec l'id: " + id));
        return memoireMapper.toDto(memoire);
    }


}
